{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","className","alt","src","CardList","robots","cardcomponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","console","log","children","style","overflowY","border","height","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCASC,EAhBF,SAACC,GAAU,IACjBC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GACjB,OACC,yBAAKC,UAAU,wDACd,yBAAMC,IAAI,SAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACC,4BAAKF,GACL,2BAAIC,MCKMK,EAXE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OACbC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACtC,OAAO,kBAAC,EAAD,CAAMC,IAAMD,EAAET,GAAKK,EAAOI,GAAGT,GAAIF,KAAOO,EAAOI,GAAGX,KAAMC,MAAQM,EAAOI,GAAGV,WAEnF,OACG,6BACDO,ICCaK,EAPG,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC9B,OACC,yBAAKZ,UAAW,OACnB,2BAAOa,KAAK,SAASC,YAAa,gBAAgBC,SAAWH,MCK9CI,G,MATD,SAACpB,GAEf,OADAqB,QAAQC,IAAItB,EAAMuB,UAElB,yBAAKC,MAAQ,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,UACpE3B,EAAMuB,YC0CQK,E,kDAvCb,aAAc,IAAD,8BACX,gBAYFC,eAAgB,SAACC,GACf,EAAKC,SAAS,CAAChB,YAAce,EAAME,OAAOC,SAZ1C,EAAKC,MAAM,CACX1B,OAAO,GACPO,YAAa,IAJF,E,gEAOO,IAAD,OACjBoB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAAEvB,OAAS+B,S,+BAQhC,IAAD,OACAC,EAAiBC,KAAKP,MAAM1B,OAAOkC,QAAO,SAAAlC,GAC5C,OAAOA,EAAOP,KAAK0C,cAAcC,SAAS,EAAKV,MAAMnB,YAAY4B,kBAErE,OAA8B,IAA3BF,KAAKP,MAAM1B,OAAOqC,OACZ,0CAIT,yBAAKzC,UAAW,MACd,2CACA,kBAAC,EAAD,CAAWY,aAAgByB,KAAKZ,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUrB,OAAUgC,U,GAjCRM,a,MCClBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACD,kBAAC,EAAD,OAECC,SAASC,eAAe,SNuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.0de87d90.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n\tconst{name,email,id} = props;\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow shadow-5 bw2 '>\r\n\t\t\t<img  alt='robots'src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) =>{\r\n\tconst cardcomponent = robots.map((user,i) =>{ \r\n\t\treturn <Card key= {i}id ={robots[i].id} name ={robots[i].name} email ={robots[i].email} />\t\r\n\t});\r\nreturn(\r\n\t  <div >\r\n\t{cardcomponent}\r\n  \t</div>\r\n\t);\r\n\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield,searchChange})=>{\r\n  return(\r\n  \t<div className ='pa2'>\r\n<input type='search' placeholder ='search robots' onChange= {searchChange}/>\r\n\t</div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll= (props)=> {\r\nconsole.log(props.children)\r\nreturn (\r\n<div style ={{overflowY: 'scroll', border:'5px solid black', height: '600px'}}>\r\n{props.children}\r\n</div>\r\n\t)\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport './App.css';\nimport Scroll from './Scroll'\n\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state={\n    robots:[],\n    searchfield :''\n    }\n  };\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users=> this.setState({ robots : users}));\n  }\n\n  onSearchChange =(event)=>{\n    this.setState({searchfield : event.target.value}) ;\n  }\n\n\n  render(){  \n    const filteredRobots = this.state.robots.filter(robots=>{\n        return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n      })\n    if(this.state.robots.length===0){\n      return <h1>Loading...</h1>\n    }\n    else{\n          return(\n    <div className ='tc'>\n      <h1>RoboFriends</h1>\n      <SearchBox searchChange = {this.onSearchChange}/>\n      <Scroll>\n      <CardList robots = {filteredRobots}/>\n      </Scroll>\n    </div>\n    );\n    }\n}\n\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}